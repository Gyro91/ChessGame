
/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "../../libXVRshared/Networking.s3d"

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;


// TODO: put your global variables here
/* Hand Variables */
var seq_number = 0;


var hand_r;
var hand_l;

var pkt_hand;
var p_adversary;




/* Camera globals */
var CamPos = [0.0, 1.0, 5.0]; 	// camera position


/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);




function OnDownload()
{
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
}



function OnInit(params)
{
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	// TODO: put your initialization code here
	SetLocalDir("");
	
 	leapDll = CVmExternDLL( "../DLL_Leap_MotionXVR/Debug/DLL_Leap_MotionXVR.dll" );

	leapDll.__AddFunction( C_VOID, "get_seq_number", C_PFLOAT);
	leapDll.__AddFunction( C_INT, "get_right_hand", C_PFLOAT);
	leapDll.__AddFunction( C_INT, "get_left_hand", C_PFLOAT);
	
	
	hand_r = Hand();
	hand_l = Hand();
	
	hand_r.init(1);
	hand_l.init(0);
	
	pkt_hand = Packet();
	p_adversary = Player();
	var my_channel = NetCreateChannel(50001, 0, VR_NO_BLOCKING);
	p_adversary.init(1, "10.1.197.54", 50000, my_channel);
	
	//right_hand = Array(81);
	//left_hand = Array(81);
	
}

function draw_textured_quad(x1,y1,x2,y2);
function draw_circle();
function draw_torus();






function OnFrame()
{	
	static var i = 0;
	CameraMoveMouse();
	SceneBegin();	
	DrawGrid([0.5, 0.5, 0.5], 100);	
	glDisable(GL_LIGHTING);
	glColor(1,1,1);
	glEnable(GL_TEXTURE_2D);
	
	 
	

	hand_r.update();
	hand_l.update();
	hand_r.draw();
	hand_l.draw();
	
	glDisable(GL_CULL_FACE);

	SceneEnd();
	
	pkt_hand.id++;
	p_adversary.send(pkt_hand);
}

function draw_textured_quad(x1,y1,x2,y2)
{
	glBegin(GL_QUADS);
	glTexCoord(1,0);
	glVertex(x2,y2,0);
	glTexCoord(0,0);
	glVertex(x1,y2,0);
	glTexCoord(0,1);
	glVertex(x1,y1,0);
	glTexCoord(1,1);
	glVertex(x2,y1,0);
	glEnd();	
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
}



function OnExit()
{
	// TODO: put your cleanup code here
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}

//////// Utility fnctions



function draw_circle()
{

		for(var i= 0; i<36 ; i++)
		{
			draw_textured_quad(-1,-1,1,1);
			glTranslate(2,0,0);
			glRotate(10,0,1,0);	
		}
			
}

function draw_torus()
{
for(var j= 0; j<36 ; j++)
	{
		for(var i= 0; i<36 ; i++)
		{
			draw_textured_quad(-1,-1,1,1);
			glTranslate(2,0,0);
			glRotate(10,0,1,0);
			
		}
			
		glRotate(10,1,0,0);
	}

}


function OnEvent()
{
	
}

function OnError()
{
	
}