
/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "../../libXVRshared/Server.s3d"
#include "../../physics/physics.s3d"
#define TIMESTEP_ON_TIMER 20

#define SPHERE_DENSITY 100
#define LAT_DENSITY 1


/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;


// TODO: put your global variables here
/* Hand Variables */
var seq_number = 0;


var hand_r;
var hand_l;

/* COMMUNICATION VARIABLES */
var server_t;
var status_server;
var pieces;




var p_adversary;
var pkt;

/* PHYSICS TEST */
var psx_cube;
var rigidMaterial;
var delta_t = 0.01;

var lat_obj;
var lat_mesh;
var lat_psx;

var sphere_obj;
var sphere_mesh;


/* Camera globals */
var CamPos = [0.0, 1.0, 5.0]; 	// camera position


/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);


function OnDownload()
{
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
}

var a = 1010;

function OnInit(params)
{
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	SetLocalDir("");
	
 	leapDll = CVmExternDLL( "../DLL_Leap_MotionXVR/Debug/DLL_Leap_MotionXVR.dll" );

	leapDll.__AddFunction( C_VOID, "get_seq_number", C_PFLOAT);
	leapDll.__AddFunction( C_INT, "get_right_hand", C_PFLOAT);
	leapDll.__AddFunction( C_INT, "get_left_hand", C_PFLOAT);
	
	/* PHYSICS TEST */
	InitPhysicsEngine();
	SetLocalDir("..\\..\\libXVRshared");
	lat_mesh = CVmNewMesh("pawnTut17old.aam");
	lat_mesh.Scale(1, 1, 1);
	sphere_mesh = CVmNewMesh(VRP_SPHERE, 10);
	SetLocalDir("");
	lat_obj = CVmObj(lat_mesh);
	lat_obj.SetPosition([20.0,0.0,0.0]);

	manager_psx.SetSceneGravity([0.0,-0.2,0.0]);
	
	rigidMaterial = manager_psx.NewMaterial(0.5, 1, 0.6);

	sphere_obj = manager_psx.AddPhFromGivenMesh(sphere_mesh, [-3.0,0.0,0.0], [0.0,0.0,0.0], PHX_DYNAMIC, SPHERE_DENSITY, rigidMaterial);

	lat_psx = manager_psx.AddPhConvexShape([2.0,0.0,0.0], [0.0,0.0,0.0], lat_mesh, PHX_DYNAMIC, LAT_DENSITY, 10, rigidMaterial);
	sphere_obj.SetVelocity([5, 0.0, 0.0]);
	lat_psx.SetVelocity([-1, 0.0, 0.0]);
	
	hand_r = Hand();
	hand_l = Hand();
	
	hand_r.init(1);
	hand_l.init(0);
	
	server_t = Server();
	server_t.conf("127.0.0.1", 35001, 0, 0 ,0);
	server_t.init();
	
	status_server = Status();
	status_server.hand_l_status = 0;
 	status_server.hand_r_status = 0;
 	status_server.pieces = 0;

	
	setTimeStep(TIMESTEP_ON_TIMER);
	
}

function OnFrame()
{	
	static var i = 0;
	CameraMoveMouse();
	SceneBegin();	
	DrawGrid([0.5, 0.5, 0.5], 100);	
	glDisable(GL_LIGHTING);
	glColor(1,1,1);
	glEnable(GL_TEXTURE_2D);
	
	hand_r.update();
	hand_l.update();
/* 	
	if (hand_l.is_active == 1) {
		update_pkt(hand_l, pkt);
		p_adversary.send(pkt);	
	}*/
	hand_r.draw();
	hand_l.draw();
	
	//lat_obj.Draw();
	
	/* PSYSICS TEST */
	manager_psx.Draw();
	
	glDisable(GL_CULL_FACE);

	SceneEnd();
	
	server_t.step(hand_l, hand_r, status_server, pieces);

}


function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	RunPhysicsEngine(delta_t);
	

	
}



function OnExit()
{
	/* PHYSICS TEST */
	manager_psx.FreeMem();
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}

//////// Utility fnctions


function OnEvent()
{
	
}

function OnError()
{
	
}