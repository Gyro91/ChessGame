#define NUM_FINGERS 5
#define NUM_COORD 3
#define NUM_JOINTS 5
#define NUM_VECTORS 27
#define JOINT_RADIUS 0.005
#define LENGTH_RAW_DATA 81 
#define F_TP 4
#define F_THUMB 0
#define F_INDEX 1
#define F_MIDDLE 2
#define F_RING 3
#define F_PINKY 4
#define TIMEOUT_TRSH 10
#define HAND_SCALE (0.001 * SIM_SCALE)
#define XT (4 * SQUARE_SIZE)
#define YT (-0.1 * SIM_SCALE)
#define ZT (4 * SQUARE_SIZE)
#define DIS_CC (0.0556 * SIM_SCALE)

GLOBAL var leapDll;



function write_vector(dest, src, start);

class FingerClass {
	
	/* Joint is an array of 5 vector. 
	 * The 0-element is the metacarpal joint
	 */
	var joints;
	var fingers_obj;
	var fingers_mesh;
	var fingers_mat;	
	
	init();
	update(raw_data, offset);
	draw();
	
};

class Hand {
	
	var raw_data;
	var palm_position;
	var palm_normal;
	var fingers;
	var is_right; // If true, it is the right hand
	var is_active; // If true, the hand is recognized
	var palm_mesh;
	var palm_mat;
	var hand_obj;
	var cc_obj;
	var cc_mesh;
	var cc_position;
	var timeout;
	var first_time_not_active; // to avoid time-out management on server part
	
	init(is_right_param);
	get_raw_data();
	push_raw_data(tmp_raw_data);
	trans(data);	
	update();
	get_cc();
	draw();
};

/* This function initializes the Hand with zero coordinates */

function Hand::init(is_right_param)
{
	palm_position = Vector(NUM_COORD);
	palm_normal = Vector(NUM_COORD);
	cc_position = Vector(NUM_COORD);
	fingers = Array(NUM_FINGERS);
	is_right = is_right_param;
	is_active = 0;
	first_time_not_active = false;
	
	for(var i = 0; i < NUM_COORD; i++) {
		palm_position[i] = 0;
		palm_normal[i] = 0;
	}
	
	for (var i = 0; i < NUM_FINGERS; i++) {
		fingers[i] =  FingerClass();
		fingers[i].init();
	}

   palm_mat = CVmMaterial();
   palm_mat.diffuse =  [1.0,1.0,1.0];
   // Loading palm mesh
   palm_mesh = CVmNewMesh(VRP_SPHERE, JOINT_RADIUS * SIM_SCALE);
   cc_mesh = CVmNewMesh(VRP_SPHERE, JOINT_RADIUS * SIM_SCALE);
   cc_mesh.SubsetSetMaterial(0, palm_mat);
   cc_mesh.ModulateMaterials([0.0, 0.0, 1.0]);
   palm_mesh.SubsetSetMaterial(0, palm_mat);
   hand_obj = CVmObj(palm_mesh);
   cc_obj = CVmObj(cc_mesh);	
   timeout = 0;	
}

/*
 * This functions updates the state of the object. It maps the raw data
 * obtained from the DLL with the XVR Hand class. 
 * 
 */
 
function Hand::update()
{
	var tmp_raw_data = Vector(LENGTH_RAW_DATA);
	var is_data;
	
	if (is_right == 1) {
		// If it is the right hand
		is_data = leapDll.get_right_hand(&tmp_raw_data);
		
	}
	else {
		// Otherwise it is a left hand
		is_data = leapDll.get_left_hand(&tmp_raw_data);
	}
	
	// Checking is_data value
	
	if (is_data == 1) {
		timeout++;
		if (timeout == TIMEOUT_TRSH)
			is_active = 0; // The hand is not present
	}
	else {
		timeout = 0;
		first_time_not_active = true;
		is_active = 1;
		// Changing frame base
			
		trans(&tmp_raw_data);
		raw_data = tmp_raw_data;
		
		write_vector(&palm_position, &tmp_raw_data, 0);
		write_vector(&palm_normal, &tmp_raw_data, 3);
		
		
		for(var i = 0; i < NUM_FINGERS; i++)
			fingers[i].update(&tmp_raw_data, 6 + (i * NUM_COORD * NUM_JOINTS));
		
		get_cc();
		cc_obj.SetPosition(cc_position);
		// Updating the obj hand position
		hand_obj.SetPosition(palm_position);
		// Scaling from mm to m
	}		 
}

/* This function draws the hand in the XVR frame */

function Hand::draw()
{	
	if (is_active == 1) {
		hand_obj.draw();
		cc_obj.draw();
		
		for(var i = 0; i < NUM_FINGERS; i++)
			fingers[i].draw();
	}
}

/* This function initializes the Finger joints */

function FingerClass::init()
{
	joints = Array(NUM_JOINTS);
	fingers_obj = Array(NUM_FINGERS);
	
	fingers_mesh = CVmNewMesh(VRP_SPHERE, JOINT_RADIUS * SIM_SCALE);
	fingers_mat = CVmMaterial();
    fingers_mat.diffuse =  [1.0, 0.0, 0.0];
    fingers_mesh.SubsetSetMaterial(0, fingers_mat);
	
	for(var i = 0; i < NUM_JOINTS; i++) {
		joints[i] = Vector(NUM_COORD);
		for(var j = 0; j < NUM_COORD; j++)
			joints[i][j] = 0;	
		
		fingers_obj[i] = CVmObj(fingers_mesh);
	}

}

/* This function updates the finger data mapping from raw data 
 * to the Finger class.
 */

function FingerClass::update(raw_data, offset)
{
 	for(var i = 0; i < NUM_JOINTS; i++) {
		write_vector(&joints[i], raw_data, offset + (i * NUM_COORD));
		// Updating the obj fingers position
		fingers_obj[i].SetPosition(joints[i]);	
	}
}

/* This function draws the fingers in the XVR frame */

function FingerClass::draw()
{
	for(var i = 0; i < NUM_JOINTS; i++)
		fingers_obj[i].draw();
} 
 
 /* This function writes the 3 coordinates in dest from (src + start) */
 
function write_vector(dest, src, start)
{
	for(var i = 0; i < NUM_COORD; i++)
		dest[i] = src[start + i];
}

/* This function returns raw_data vector is the hand is active */
 
function Hand::get_raw_data() {
	if (is_active == 1)
		return raw_data;
	else
		return NULL;
}

/* This function updates hand with input data */

function Hand::push_raw_data(tmp_raw_data) {
	is_active = 1;
	// Changing frame base
	raw_data = tmp_raw_data;
	
	write_vector(&palm_position, &tmp_raw_data, 0);
	write_vector(&palm_normal, &tmp_raw_data, 3);
	
	for(var i = 0; i < NUM_FINGERS; i++)
		fingers[i].update(&tmp_raw_data, 6 + (i * NUM_COORD * NUM_JOINTS));
	
	// Updating the obj hand position
	hand_obj.SetPosition(palm_position);
	// Scaling from mm to m
	// outputln(hand_obj.GetPosition());
}

/* This function translates the Hand raw data */

function Hand::trans(data)
{	
	for(var i = 0; i < NUM_VECTORS; i++) {	
		// Translation except for the palm normal 
		if (i != 1) {	
		#ifdef PLAYER_1_TRASL
		data[3 * i] = -HAND_SCALE * data[3 * i] + XT;
		data[(3 * i) + 1] = HAND_SCALE * data[(3 * i) + 1] + YT;
		data[(3 * i) + 2] = -HAND_SCALE * data[(3 * i) + 2] + ZT;
		#endif
		
		#ifdef PLAYER_2_TRASL
		data[3 * i] = HAND_SCALE * data[3 * i] + XT;
		data[(3 * i) + 1] = HAND_SCALE * data[(3 * i) + 1] + YT;
		data[(3 * i) + 2] = HAND_SCALE * data[(3 * i) + 2] + ZT;
		#endif
		}
		else {
		#ifdef PLAYER_1_TRASL
		data[3 * i] = -data[3 * i];
		data[(3 * i) + 2] = -data[(3 * i) + 2];
		#endif
			
		}
	}
	
}

function Hand::get_cc()
{	
	var thumbTip = Vector(NUM_COORD);
 	var middleTip = Vector(NUM_COORD);
	
	if (is_active == 1) {
		//write_vector(&thumbTip, &raw_data, 6 + (F_THUMB *  NUM_COORD * NUM_JOINTS) + (F_TP * NUM_COORD));
		
		//write_vector(&middleTip, &raw_data, 6 + (F_MIDDLE *  NUM_COORD * NUM_JOINTS) + (F_TP * NUM_COORD));
 
		//cc_position = (middleTip + thumbTip)/2;
		cc_position = palm_position + (palm_normal * DIS_CC);
	}
	
}
 