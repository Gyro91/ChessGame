#define NUM_FINGERS 5
#define NUM_COORD 3
#define NUM_JOINTS 5
#define MM_TO_M 0.01
#define LENGTH_RAW_DATA 81

GLOBAL var leapDll;

function write_vector(dest, src, start);

class FingerClass {
	
	/* Joint is an array of 5 vector. 
	 * The 0-element is the metacarpal joint
	 */
	var joints;
	var fingers_obj;
	var fingers_mesh;
	var fingers_mat;	
	
	init();
	update(raw_data, offset);
	draw();
	
};

class Hand {
	
	var raw_data;
	var palm_position;
	var palm_normal;
	var fingers;
	var is_right; // If true, it is the right hand
	var is_active; // If true, the hand is recognized
	var palm_mesh;
	var palm_mat;
	var hand_obj;
	
	init(is_right_param);
	get_raw_data();
	push_raw_data(tmp_raw_data);	
	update();
	draw();
};

/* This function initializes the Hand with zero coordinates */

function Hand::init(is_right_param)
{
	palm_position = Vector(NUM_COORD);
	palm_normal = Vector(NUM_COORD);
	fingers = Array(NUM_FINGERS);
	is_right = is_right_param;
	is_active = 0;
	
	for(var i = 0; i < NUM_COORD; i++) {
		palm_position[i] = 0;
		palm_normal[i] = 0;
	}
	
	for (var i = 0; i < NUM_FINGERS; i++) {
		fingers[i] =  FingerClass();
		fingers[i].init();
	}

   palm_mat = CVmMaterial();
   palm_mat.diffuse =  [1.0,1.0,1.0];
   // Loading palm mesh
   palm_mesh = CVmNewMesh(VRP_SPHERE, 10);
   palm_mesh.SubsetSetMaterial(0, palm_mat);
   hand_obj = CVmObj(palm_mesh);
   hand_obj.SetScale(0.1);
}

/*
 * This functions updates the state of the object. It maps the raw data
 * obtained from the DLL with the XVR Hand class. 
 * 
 */
 
function Hand::update()
{
	var tmp_raw_data = Vector(LENGTH_RAW_DATA);
	var is_data;
	
	if (is_right == 1) {
		// If it is the right hand
		is_data = leapDll.get_right_hand(&tmp_raw_data);
		
	}
	else {
		// Otherwise it is a left hand
		is_data = leapDll.get_left_hand(&tmp_raw_data);
	}
	
	// Checking is_data value
	
	if (is_data == 1) 
		is_active = 0; // The hand is not present
	else {
		is_active = 1;
		// Changing frame base
		raw_data = tmp_raw_data;
		
		write_vector(&palm_position, &tmp_raw_data, 0);
		write_vector(&palm_normal, &tmp_raw_data, 3);
		
		for(var i = 0; i < NUM_FINGERS; i++)
			fingers[i].update(&tmp_raw_data, 6 + (i * NUM_COORD * NUM_JOINTS));
		
		// Updating the obj hand position
		hand_obj.SetPosition(palm_position * MM_TO_M);
		// Scaling from mm to m
	}		 
}

/* This function draws the hand in the XVR frame */

function Hand::draw()
{	
	if (is_active == 1) {
		hand_obj.draw();
		
		for(var i = 0; i < NUM_FINGERS; i++)
			fingers[i].draw();
	}
}

/* This function initializes the Finger joints */

function FingerClass::init()
{
	joints = Array(NUM_JOINTS);
	fingers_obj = Array(NUM_FINGERS);
	
	fingers_mesh = CVmNewMesh(VRP_SPHERE, 10);
	fingers_mat = CVmMaterial();
    fingers_mat.diffuse =  [1.0, 0.0, 0.0];
    fingers_mesh.SubsetSetMaterial(0, fingers_mat);
	
	for(var i = 0; i < NUM_JOINTS; i++) {
		joints[i] = Vector(NUM_COORD);
		for(var j = 0; j < NUM_COORD; j++)
			joints[i][j] = 0;	
		
		fingers_obj[i] = CVmObj(fingers_mesh);
    	fingers_obj[i].SetScale(0.1);
	}	
}

/* This function updates the finger data mapping from raw data 
 * to the Finger class.
 */

function FingerClass::update(raw_data, offset)
{
 	for(var i = 0; i < NUM_JOINTS; i++) {
		write_vector(&joints[i], raw_data, offset + (i * NUM_COORD));
		// Updating the obj fingers position
		fingers_obj[i].SetPosition(joints[i] * MM_TO_M);	
	}
}

/* This function draws the fingers in the XVR frame */

function FingerClass::draw()
{
	for(var i = 0; i < NUM_JOINTS; i++)
		fingers_obj[i].draw();
} 
 
 /* This function writes the 3 coordinates in dest from (src + start) */
 
function write_vector(dest, src, start)
{
	for(var i = 0; i < NUM_COORD; i++)
		dest[i] = src[start + i];
}

/* This function returns raw_data vector is the hand is active */
 
function Hand::get_raw_data() {
	if (is_active == 1)
		return raw_data;
	else
		return NULL;
}

/* This function updates hand with input data */


function Hand::push_raw_data(tmp_raw_data) {
	is_active = 1;
	// Changing frame base
	raw_data = tmp_raw_data;
	
	write_vector(&palm_position, &tmp_raw_data, 0);
	write_vector(&palm_normal, &tmp_raw_data, 3);
	
	for(var i = 0; i < NUM_FINGERS; i++)
		fingers[i].update(&tmp_raw_data, 6 + (i * NUM_COORD * NUM_JOINTS));
	
	// Updating the obj hand position
	hand_obj.SetPosition(palm_position * MM_TO_M);
	// Scaling from mm to m
	// outputln(hand_obj.GetPosition());
}
 