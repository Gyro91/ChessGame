/*
 *  This library implements all the classes and functions for the Server side
 *  
 * 
 */
#include "Packet.s3d"
#include "LevelClass.s3d"
#include "HandClass.s3d"
#include "Architect.s3d"
#include "Hand_SM.s3d"
 
#define CLIENT_1 0
#define CLIENT_2 2
#define NUM_REMOTE_HANDS 4
#define PL1_HND_R 0
#define PL1_HND_L 1
#define PL2_HND_R 2
#define PL2_HND_L 3


class Server {
	
	var server_address;
 	var udp_server_port1, udp_server_port2;
 	var addr_client1, addr_client2;	
 	var udp_client1_port, udp_client2_port;
 	var id_channel_client1, id_channel_client2;
 	var pkt_hand;
 	var pkt_piece;
 	var cnt_client;
 	var remote_hands;
 	
 	conf(s_address, s_port1, s_port2, c_address1, 
 		c_port1, c_address2, c_port2
 	);
 	init();
 	sync();
 	recv(client);
 	send(data, client);
 	compare(old, new);
 	step();
 	toHandSM(pkt,client);
 	
};
 
/* This function is used to configure the Server. */
 
function Server::conf(s_address, s_port1, s_port2, c_address1, 
 		c_port1, c_address2, c_port2)
{	
	server_address = s_address;
	udp_server_port1 = s_port1;
	udp_server_port2 = s_port2;
	
	addr_client1 = c_address1;
	addr_client2 = c_address2;
	
	udp_client1_port = c_port1;
	udp_client2_port = c_port2;
}
 
/* All the operations for the Server initialization 
 * are encapsulated in this function.
 */
  
function Server::init()
{	
	cnt_client = Array(4);
	cnt_client = [0, 0, 0 , 0];
	
 	id_channel_client1 = NetCreateChannel(udp_server_port1, 
 										addr_client1, VR_NO_BLOCKING);
 	if (id_channel_client1 == -1)
 		outputln("Error creating channel client1");	
 		
	 id_channel_client2 = NetCreateChannel(udp_server_port2, 
 											addr_client2, VR_NO_BLOCKING);
 	if (id_channel_client2 == -1)
 		outputln("Error creating channel client2");	 
 
 	pkt_piece = Packet();
 	init_PiecePayload(pkt_piece);
 	
	level_init();
	
 	remote_hands = Array(NUM_REMOTE_HANDS); 
 	
 	for (var i = 0; i < NUM_REMOTE_HANDS; i++) {
		remote_hands[i] =  Hand_SM();
	}
	remote_hands[PL1_HND_R].init(PL1_HND_R);
	remote_hands[PL1_HND_L].init(PL1_HND_L);
	remote_hands[PL2_HND_R].init(PL2_HND_R);
	remote_hands[PL2_HND_L].init(PL2_HND_L);	
}
 
 /* This function is used by the Server to receive a packet from a specified
  * client.
  */
  
function Server::recv(client)
{	
 	var pkt = Packet();
 	var actual_cnt;
 	/*
 	 * Elaborate the packet
 	 */

 	
 	if (client == CLIENT_1) {
 		pkt = NetVarReceiveFrom(id_channel_client1, addr_client1);

 		if (pkt != NULL) {
 			if (pkt.type == TYPE_HAND_PAYLOAD) {
 				toHandSM(pkt, client); 					
 				if (pkt.seq_remote_id < cnt_client[client + pkt.payload.is_right])
 					return NULL;
 				else {
 					cnt_client[client + pkt.payload.is_right] = pkt.seq_remote_id;
 					return pkt;
 				}
 			}
		}
 	}
 	else if (client == CLIENT_2) {
 		pkt = NetVarReceiveFrom(id_channel_client2, addr_client2);
 		if (pkt != NULL) {
 			if (pkt.type == TYPE_HAND_PAYLOAD) {
 				toHandSM(pkt, client);
 				if (pkt.seq_remote_id < cnt_client[client + pkt.payload.is_right])
 					return NULL;
 				else {
 					cnt_client[client + pkt.payload.is_right] = pkt.seq_remote_id;
 					return pkt;
 				}
 			}
		}
 	}
}
 
 /* This function is used by the Server to send a packet to the specified
  * client.
  */
  
function Server::send(data, client)
{	
 	if (client == CLIENT_1)
 		NetVarSendTo(addr_client1, udp_client1_port, data);
 	else if (client == CLIENT_2)
 		NetVarSendTo(addr_client2, udp_client2_port, data);
}

function Server::compare(old, new)
{

	for (var i=0; i<NUM_PIECES; i++) {
		if (old[i] != new[i]) {
			pkt_piece.payload.id = i;
			pkt_piece.payload.pos = [new[i][0], new[i][1], new[i][2]];
			pkt_piece.payload.angle = new[i][3];
			pkt_piece.payload.axis = [new[i][4], new[i][5], new[i][6]];
			pkt_piece.seq_remote_id++;
			send(pkt_piece, CLIENT_1);
			send(pkt_piece, CLIENT_2);
		}
	}
}
 
function Server::step()
{	
	/* Update the simulation status */
	my_level.step();
	/* Check if the status of any piece has changed */
	compare(my_level.GetStatus(), my_level.GetPhysxResults());
	/* Update the piece status table */
	my_level.UpdateStatus();
	
	
	while (NetDataReady(id_channel_client2) == TRUE) {
		var data = recv(CLIENT_2);
		if (data != NULL) {
			send(data, CLIENT_1);
		}	
	}

	while (NetDataReady(id_channel_client1) == TRUE) {
		var data = recv(CLIENT_1);
		if (data != NULL) {
			send(data, CLIENT_2);
		}	
	}	
}	

/*
 * This function elaborates data from real hand and steps its correspondent Hand_SM 
 */
function Server::toHandSM(pkt,client)
{
	var smPaketTemp = smPaket();
	smPaketTemp.init(pkt);
	
	/*
	 * Routing data from the packet
	*/
	if (pkt.payload.is_right == 1) {
		if (client == CLIENT_1)
			remote_hands[PL1_HND_R].step(smPaketTemp);
		else
			remote_hands[PL2_HND_R].step(smPaketTemp);
	} else {
		if (client == CLIENT_1)
			remote_hands[PL1_HND_L].step(smPaketTemp);
		else
			remote_hands[PL2_HND_L].step(smPaketTemp);		
	}
}

/* Function to synch the server with the client. It waits until the Clients are online */

function Server::sync()
{	
	output("Waiting for Players...");
	
	while (TRUE) {
		if (NetDataReady(id_channel_client1) == TRUE &&
			NetDataReady(id_channel_client2) == TRUE)
			break;
	}
	
	outputln("Ok, Ready!");
}
