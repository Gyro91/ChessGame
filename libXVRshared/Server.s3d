/*
 *  This library implements all the classes and functions for the Server side
 *  
 */
 #include "Packet.s3d"
 #include "HandClass.s3d"
 #define CLIENT_1 0
 #define CLIENT_2 1
 
 class Server {
 	
 	var server_address;
 	var udp_server_port1, udp_server_port2;
 	var addr_client1, addr_client2;	
 	var udp_client1_port, udp_client2_port;
 	var id_channel_client1, id_channel_client2;
 	var pkt_hand;
 	
 	
 	conf(s_address, s_port1, s_port2, c_address1, 
 		c_port1, c_address2, c_port2
 	);
 	init();
 	recv(client);
 	send(data, client);
 	step();
 	
 };
 
 /* This function is used to configure the Server. */
 
 function Server::conf(s_address, s_port1, s_port2, c_address1, 
 		c_port1, c_address2, c_port2)
 {	
	server_address = s_address;
	udp_server_port1 = s_port1;
	udp_server_port2 = s_port2;
	
	addr_client1 = c_address1;
	addr_client2 = c_address2;
	
	udp_client1_port = c_port1;
	udp_client2_port = c_port2;
 }
 
 /* All the operations for the Server initialization 
  * are encapsulated in this function.
  */
  
 function Server::init()
 {
 	id_channel_client1 = NetCreateChannel(udp_server_port1, 
 										addr_client1, VR_NO_BLOCKING);
 	if (id_channel_client1 == -1)
 		outputln("Error creating channel client1");	
 		
	 id_channel_client2 = NetCreateChannel(udp_server_port2, 
 											addr_client2, VR_NO_BLOCKING);
 	if (id_channel_client2 == -1)
 		outputln("Error creating channel client2");	 
 }
 
 /* This function is used by the Server to receive a packet from a specified
  * client.
  */
  
 function Server::recv(client)
 {	
 	var pkt = Packet();
 	
 	if (client == CLIENT_1) {
 		pkt = NetVarReceiveFrom(id_channel_client1, addr_client1);
 		if (pkt != NULL)
 			return pkt;
 	}
 	else if (client == CLIENT_2) {
 		pkt = NetVarReceiveFrom(id_channel_client2, addr_client2);
 		if (pkt != NULL)
 			return pkt;
 	}
 }
 
 /* This function is used by the Server to send a packet to the specified
  * client.
  */
  
 function Server::send(data, client)
 {	
 	if (client == CLIENT_1)
 		NetVarSendTo(addr_client1, udp_client1_port, data);
 	else if (client == CLIENT_2)
 		NetVarSendTo(addr_client2, udp_client2_port, data);
 }
 
 function Server::step()
 {	
	
	
	while (NetDataReady(id_channel_client2) == TRUE) {
	var data = recv(CLIENT_2);
	if (data != NULL) {
		send(data, CLIENT_1);
	}	
	}
	
	
	// Mirroring Data
 }	