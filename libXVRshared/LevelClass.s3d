#include "../physics/physics.s3d"

var my_level;

#define CHESSBOARD_ID	0
#define KING_ID			1
#define QUEEN_ID		2
#define ROOK0_ID		3
#define ROOK1_ID		4
#define KNIGHT0_ID		5
#define KNIGHT1_ID		6
#define BISHOP0_ID		7
#define BISHOP1_ID		8
#define PAWN0_ID		9
#define PAWN1_ID		10
#define PAWN2_ID		11
#define PAWN3_ID		12
#define PAWN4_ID		13
#define PAWN5_ID		14
#define PAWN6_ID		15
#define PAWN7_ID		16

#define PIECE_DENSITY	1

#define CHESSBOARD_MESH	"../../meshes/chessboard.aam"
#define KING_MESH		"../../meshes/king.aam"
#define QUEEN_MESH		"../../meshes/queen.aam"
#define ROOK_MESH		"../../meshes/rook.aam"
#define KNIGHT_MESH		"../../meshes/knight.aam"
#define BISHOP_MESH		"../../meshes/bishop.aam"
#define PAWN_MESH		"../../meshes/pawn2.aam"

/* Actually the chessboard mesh has a size of 16x16 meters, 
 * we scale it in order to have a 30x30 centimeters chessboard.
 */
 
#define SIM_SCALE			100
#define CHESSBOARD_SCALE	SIM_SCALE * [0.01875, 0.01875, 0.01875]
#define CHESSBOARD_SIZE		SIM_SCALE * 0.3
#define SQUARE_SIZE			SIM_SCALE * 0.0375
#define SQUARE_VECT			[SQUARE_SIZE, 0.0, 0.0]
/* The pawn has a diameter of about 2 meters. usually
 * a square in the chessboard has a side size which is
 * twice the pawn base diameter. So, in our case we want
 * a pawn with a base diameter of 1.87 centimeters.
 */
#define PIECE_SCALE		SIM_SCALE * [0.00935, 0.00935, 0.00935]
#define X_OFFSET		SQUARE_SIZE*0.5
#define Y_OFFSET		SQUARE_SIZE
#define Z_OFFSET		SQUARE_SIZE*0.5
#define PAWN_Z			SQUARE_SIZE*2.5		

/* Macros for pieces positions. */
#define CHESSBOARD_POS	[CHESSBOARD_SIZE/2, SQUARE_SIZE/2, CHESSBOARD_SIZE/2]
#define OPP_PAWN_Z		SQUARE_SIZE*3
#define OPP_OTHER_Z		SQUARE_SIZE*5
#define OPP_PAWN_VECT	[0.0, 0.0, OPP_PAWN_Z]
#define OPP_OTHER_VECT	[0.0, 0.0, OPP_OTHER_Z]
#define	PAWN0_POS		[SQUARE_SIZE*0.5, Y_OFFSET, SQUARE_SIZE*2.5]
#define ROOK0_POS		[SQUARE_SIZE*0.5, Y_OFFSET, SQUARE_SIZE*1.5]
#define ROOK1_POS		[SQUARE_SIZE*7.5, Y_OFFSET, SQUARE_SIZE*1.5]
#define KNIGHT0_POS		[SQUARE_SIZE*1.5, Y_OFFSET, SQUARE_SIZE*1.5]
#define KNIGHT1_POS		[SQUARE_SIZE*6.5, Y_OFFSET, SQUARE_SIZE*1.5]
#define BISHOP0_POS		[SQUARE_SIZE*2.5, Y_OFFSET, SQUARE_SIZE*1.5]
#define BISHOP1_POS		[SQUARE_SIZE*5.5, Y_OFFSET, SQUARE_SIZE*1.5]
#define KING_POS		[SQUARE_SIZE*3.5, Y_OFFSET, SQUARE_SIZE*1.5]
#define QUEEN_POS		[SQUARE_SIZE*4.5, Y_OFFSET, SQUARE_SIZE*1.5]


class Level {
	var my_pieces;
	var opp_pieces;
	var chessboard;
	
	Draw();
};

class Piece {
	var piece_id;
	var piece_mesh;
	var piece_psx;
	var pos;
	var rot;

	GetId();
	GetPsx();
	Draw();
};

function level_init() {
	my_level = Level();
}

function Piece::Piece(id, mesh, init_pos, init_rot) {
	piece_id = id;
	pos = init_pos;
	rot = init_rot;
	
	switch(id) {
		case CHESSBOARD_ID: 
			piece_mesh = CVmNewMesh(CHESSBOARD_MESH);
			//piece_mesh.Normalize(0.3);
			piece_mesh.Scale(CHESSBOARD_SCALE);
			break;
		case KING_ID:
			piece_mesh = CVmNewMesh(KING_MESH);
			piece_mesh.Scale(PIECE_SCALE);
			break;
		case QUEEN_ID:
			piece_mesh = CVmNewMesh(QUEEN_MESH);
			piece_mesh.Scale(PIECE_SCALE);
			break;
		case ROOK0_ID:
		case ROOK1_ID:
			piece_mesh = CVmNewMesh(ROOK_MESH);
			piece_mesh.Scale(PIECE_SCALE);
			break;
		case KNIGHT0_ID:
		case KNIGHT1_ID:
			piece_mesh = CVmNewMesh(KNIGHT_MESH);
			piece_mesh.Scale(PIECE_SCALE);
			break;
		case BISHOP0_ID:
		case BISHOP1_ID:
			piece_mesh = CVmNewMesh(BISHOP_MESH);
			piece_mesh.Scale(PIECE_SCALE);
			break;
		case PAWN0_ID:
		case PAWN1_ID:
		case PAWN2_ID:
		case PAWN3_ID:
		case PAWN4_ID:
		case PAWN5_ID:
		case PAWN6_ID:
		case PAWN7_ID:
			piece_mesh = CVmNewMesh(PAWN_MESH);
			piece_mesh.Scale(PIECE_SCALE);
			break;
		default:
			outputln("Invalid ID when creating Piece object!");
			break;
	}
	
	if (id == CHESSBOARD_ID) {
		piece_psx = manager_psx.AddPhConvexShape(pos, rot, piece_mesh, PHX_FIXED, PIECE_DENSITY, 100, rigidMaterial);
		//piece_psx = manager_psx.AddPhCube([0.0,0.0,0.0], [0.0,0.0,0.0], [1, 0.10, 1], PHX_FIXED, PIECE_DENSITY, 10, rigidMaterial);
		piece_psx.SetContactOffset(0.005);
		
	} else if (id == KING_ID) {
		//piece_psx = manager_psx.AddPhSphere(pos, rot, 0.005, PHX_DYNAMIC, PIECE_DENSITY, 10, rigidMaterial);
		piece_psx = manager_psx.AddPhObject(pos, rot, PHX_DYNAMIC);
		piece_psx.LinkToMesh(piece_mesh);
		// piece_psx.AddConeFrustumShape([0.0, 0.0, 0.0], [0.0, 0.0, 0.0], 0.005, 0.019, 0.06, PIECE_DENSITY, rigidMaterial,
		//	 manager_psx, 10, true);
		//piece_psx.AddBoxShape([0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.019, 0.05, 0.019], PIECE_DENSITY, rigidMaterial, 10, true);
		piece_psx.AddCylinderShape([0.0, 0.019, 0.0], [0.0, 0.0, 0.0], 0.019, 0.019, PHX_DYNAMIC, rigidMaterial, manager_psx, 10, true);
	} else if (id == QUEEN_ID) {
		piece_psx = manager_psx.AddPhConvexShape(pos, rot, piece_mesh, PHX_DYNAMIC, PIECE_DENSITY, 10, rigidMaterial);
		piece_psx.AddBoxShape([0.0, -0.03, 0.0], [0.0, 0.0, 0.0], [0.019, 0.005, 0.019], PIECE_DENSITY, rigidMaterial, 10, true);
	}
	else
		// piece_psx = manager_psx.AddPhConvexShape(pos, rot, piece_mesh, PHX_DYNAMIC, PIECE_DENSITY, 10, rigidMaterial);
		piece_psx = manager_psx.AddPhConvexShape(pos, rot, piece_mesh, PHX_DYNAMIC, PIECE_DENSITY, 10, rigidMaterial);
		//piece_psx.SetContactOffset(0.005);	
}

function Piece::GetPsx() {
	return piece_psx;
}

function Piece::Draw() {
	piece_psx.Draw();
}

function Level::Level() {
	my_pieces = Array(16);
	opp_pieces = Array(16);
	var rot = [0.0, 0.0, 0.0];
	var pos_other = {KING_POS, QUEEN_POS, ROOK0_POS, ROOK1_POS, KNIGHT0_POS, KNIGHT1_POS, 
		BISHOP0_POS, BISHOP1_POS};
	var mesh_pieces = {KING_MESH, QUEEN_MESH, ROOK_MESH, ROOK_MESH, KNIGHT_MESH, KNIGHT_MESH, BISHOP_MESH, BISHOP_MESH};
	/* Instanciate the chessboard */
	chessboard = Piece(CHESSBOARD_ID, CHESSBOARD_MESH, CHESSBOARD_POS, rot);
	/* Instaciate all the other pieces */
	for (var i=0; i<=15; i++) {
		if (i <= 7) {
			/* It's not a pawn. */
			my_pieces[i] = Piece(i+1, mesh_pieces[i], pos_other[i], rot);
			opp_pieces[i] = Piece(i+1, mesh_pieces[i], pos_other[i] + OPP_OTHER_VECT, rot);
		} else {
			my_pieces[i] = Piece(i+1, PAWN_MESH, PAWN0_POS + SQUARE_VECT*(i-8), rot);
			opp_pieces[i] = Piece(i+1, PAWN_MESH, PAWN0_POS + SQUARE_VECT*(i-8) + OPP_PAWN_VECT, rot);
		}
	}
}

function Level::Draw() {
	manager_psx.Draw();
}
