/*
 *  This library implements all the classes and functions for the Client side
 * 
 */
 #include "Networking.s3d"
 
 class Client {
 	

 	var server_address;

 	var UDP_client_port;
 	var id_channel;
 	
 	conf(address, port1);
 	connect();
 	rcv_pkt(channel, ip);
 	step(hand_l, hand_r);
 	recv_status();
 	
 };
 
 /* This function is used to configure address and ports. */
 
 function Client::conf(address, port1)
 {	
 	server_address = address;
 	UDP_client_port = port1;		
 }
 
 /* This function is used from the Client to connect to the Server */
 
 function Client::connect()
 {	
 	id_channel = NetCreateChannel(UDP_client_port, 
 											server_address, VR_NO_BLOCKING);
 	if (id_channel == -1)
 		outputln("Error Creating channel");				
 }
 

 
 /* This function returns the packet from the other player 
 * with an information to the caller about an eventually
 * error:
 *  (-1) if a packet is not received 
 * 	(-2) if a packet does not respect the sequence
 *  (0)  if everything went well
 */

 function Client::rcv_pkt(channel, ip)
 {
	var pkt_e = Packet_err();
	var pkt = NetVarReceiveFrom(channel, ip);
	
	if (pkt == NULL) 
		pkt_e.type_error = -1;		
	else if (pkt.sequence_remote_id < last_rx_seq_number)  
		pkt_e.type_error = -2;
	else {
		pkt_e.type_error = 0;
		pkt_e.hand_l_status = pkt.hand_l_status;
		pkt_e.hand_r_status = pkt.hand_r_status;
		pkt_e.data_hand_l = pkt.data_hand_l;
		pkt_e.data_hand_r = pkt.data_hand_r;
		pkt_e.sequence_remote_id = pkt.sequence_remote_id;
		last_rx_seq_number = pkt.sequence_remote_id;
	}
	
	return pkt_e;
 }

 function Client::step(hand_l, hand_r)
 {
	var pkt_e = rcv_pkt(id_channel, server_address);
	if (pkt_e.type_error == 0) {
		
		if (pkt_e.hand_l_status == 1) {
			hand_l.push_raw_data(pkt_e.data_hand_l);
			hand_l.draw();
		}
		if (pkt_e.hand_r_status == 1) {
			hand_r.push_raw_data(pkt_e.data_hand_r);
			hand_r.draw();
		}
	}
 }