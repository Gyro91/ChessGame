 /*
  *  This library implements all the classes and functions for the Client side
  * 
  */
  
 /* Uncomment to display high quality meshes */
 //#define HI_RES 
  
 #include "Packet.s3d"
 #include "LevelClass.s3d"
 #include "HandClass.s3d"
 
 #define RIGHT_HAND 1
 #define LEFT_HAND 0

 #define DLL_PATH "../../libXVRshared/DLL_Leap_MotionXVR.dll"
 #define FRANCO_DLL_PATH "FrancoDll.dll"
  
 class Client {
 	
 	var server_address;
	var udp_server_port;
 	var udp_client_port;
 	var id_channel;
 	var pkt_hand_l, pkt_hand_r;
 	var pkt_piece;
 	var remote_hand_r; 
 	var remote_hand_l; 
 	var cnt_hands;
 	var cnt_pieces;
 	var is_selected;
 	
 	conf(s_address, s_port, c_port);
 	init();
 	sync();
 	step(hand_r, hand_l, player_id);
 	send(data);
 	selection(cc, player_id, palm, hand_type);
 	recv();
 	draw();
 	
 };
 
 /* This function is used to configure address and ports. */
 
 function Client::conf(s_address, s_port, c_port)
 {	
 	server_address = s_address;
 	udp_server_port = s_port;
 	udp_client_port = c_port;		
 }
 
 /* This function is used from the Client to do all the init operations */
 
 function Client::init()
 {	
 	var i;
 	cnt_hands = Array(2);
 	cnt_hands = [0, 0];
 	cnt_pieces = 0;
 	
 	is_selected = Array(NUM_PIECES / 2);
 	for (i = 0; i < (NUM_PIECES / 2); i++) {
 		is_selected[i] = -1;
 	}
 	id_channel = NetCreateChannel(udp_client_port, 
 									0, VR_NO_BLOCKING);
 	if (id_channel == -1)
 		outputln("Error creating channel");	
 		
 	pkt_hand_l = Packet();
 	pkt_hand_r = Packet();
 	pkt_piece = Packet();
 	
 	remote_hand_r = Hand();
 	remote_hand_l = Hand();
 	
 	init_HandPayload(pkt_hand_r);
	init_HandPayload(pkt_hand_l);
	init_PiecePayload(pkt_piece);
	
	remote_hand_r.init(RIGHT_HAND);
 	remote_hand_l.init(LEFT_HAND);
	
	level_init();		
 }
 

 function Client::send(data)
 {	
 	if (data != NULL)
 		data.seq_remote_id++;
 
	NetVarSendTo(server_address, udp_server_port, data);
 }

 function Client::recv()
 {	
 	var pkt = Packet();
 	
 	pkt = NetVarReceiveFrom(id_channel, server_address);
 	if (pkt != NULL){
 		if (pkt.type == TYPE_HAND_PAYLOAD) {
 			if (pkt.seq_remote_id < cnt_hands[pkt.payload.is_right])
 				pkt = NULL;
 			else {
 				cnt_hands[pkt.payload.is_right] = pkt.seq_remote_id;
 			}
 			
 		}
 		else if (pkt.type == TYPE_PIECE_PAYLOAD) {
 			if (pkt.seq_remote_id < cnt_pieces)
 				pkt = NULL;
 			else {
 				cnt_pieces = pkt.seq_remote_id;
 			}
 		}
 	}
 	return pkt;
 }
 
 function Client::step(hand_r, hand_l, player_id)
 {	
	if (hand_r.is_active == 1) {
		selection(hand_r.cc_position, player_id, hand_r.palm_position, RIGHT_HAND);
		pkt_hand_r.payload.raw_data = hand_r.get_raw_data();
		pkt_hand_r.payload.is_right = 1;
		pkt_hand_r.payload.status_hand = 1;
		send(pkt_hand_r);
	} 
	if (hand_r.is_active == 0 && hand_r.first_time_not_active == true) {
		hand_r.first_time_not_active = false;
		pkt_hand_r.payload.raw_data = 0;
		pkt_hand_r.payload.is_right = 1;
		pkt_hand_r.payload.status_hand = 0;
		send(pkt_hand_r);
	}
	if (hand_l.is_active == 1) {
		selection(hand_l.cc_position, player_id, hand_l.palm_position, LEFT_HAND);
		pkt_hand_l.payload.raw_data = hand_l.get_raw_data();
		pkt_hand_l.payload.is_right = 0;
		pkt_hand_l.payload.status_hand = 1;
		send(pkt_hand_l);
	}
	if (hand_l.is_active == 0 && hand_l.first_time_not_active == true) {
		hand_l.first_time_not_active = false;
		pkt_hand_l.payload.raw_data = 0;
		pkt_hand_l.payload.is_right = 0;
		pkt_hand_l.payload.status_hand = 0;
		send(pkt_hand_l);
	}
	
	while (NetDataReady(id_channel) == TRUE) {
		var data = recv();
		if (data != NULL) {
			switch(data.type) {
			case TYPE_HAND_PAYLOAD:
				if (data.payload.is_right == 1) {
					if (data.payload.status_hand == 1) 
						remote_hand_r.push_raw_data(data.payload.raw_data);
					else
						remote_hand_r.is_active = 0;
				}
				else if (data.payload.is_right == 0) { 
					if (data.payload.status_hand == 1) 
						remote_hand_l.push_raw_data(data.payload.raw_data);
					else
						remote_hand_l.is_active = 0;
				}
				break;
			case TYPE_PIECE_PAYLOAD:				
				my_level.PieceUpdate(data.payload.id, data.payload.pos, data.payload.angle,
					data.payload.axis);
				break;	
			}
		}
	}	
 }
 
 
 function Client::draw()
 {
 	remote_hand_l.draw();
	remote_hand_r.draw();	
	my_level.Draw();
 }
 
 function Client::sync()
 {	
 	send(NULL);
 }

 function Client::selection(cc, player_id, palm, hand_type)
 {
 	var piece, piece_obj, ret;
	
	// Checking every pieces of the player
	for(var i = 0; i < (NUM_PIECES / 2); i++) {
		piece = my_level.GetPiece(player_id + i);
		piece_obj = piece.GetObj();
		// Checking if the cc is inside the Bounding Box
		ret = piece_obj.IsCollidingBBoxOnly(palm, cc);
		
		if (ret == true && is_selected[i] == -1) {
			is_selected[i] = hand_type;
			piece.ChangeColor(SEL_COLOR);	
		}
		else if (ret == false && is_selected[i] == hand_type) {
			is_selected[i] = -1;
			if (player_id == PLAYER_1) {
				piece.ChangeColor(P1_COLOR);
				}
			else {
				piece.ChangeColor(P2_COLOR);	
			}
		}	
	}
 }