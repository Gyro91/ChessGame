/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>

#define PLAYER_1_TRASL
#include "../../libXVRshared/Client.s3d"

#define CAM_STEP	0.1

/* Uncomment to show the XVR grid */
#define GRID_ON

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

/* Hand Variables */
var seq_number = 0;
var hand_r;
var hand_l;

/* Communication variables */
var client_t;

/* Camera globals */
var CamPos = [14.5822 , 9.4691 , -47.8944]; 	// camera position


/* Function declarations */
function CameraMoveMouse();
function CameraMoveKeyboard();
function DrawGrid(col, size);


function OnDownload()
{

}


function OnInit(params)
{
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	SetLocalDir("");
	
	/* Load Oculus DK2 dll */
	global var HMD = CVmExternDLL(FRANCO_DLL_PATH);
 	HMD.__AddFunction( C_VOID, "SceneBegin");
	HMD.__AddFunction( C_VOID, "frame_left");
	HMD.__AddFunction( C_VOID, "frame_right");
	HMD.__AddFunction( C_VOID, "SceneEnd");
	HMD.__AddFunction( C_PFLOAT_16, "GetControllerMatrix",C_INT);
	HMD.__AddFunction( C_PFLOAT_16, "GetCameraMatrix");
	HMD.__AddFunction( C_PFLOAT_2, "GetTouchpadCoord",C_INT);
	HMD.__AddFunction( C_PFLOAT_2, "GetTriggerCoord",C_INT);
	HMD.__AddFunction( C_INT, "IsMenuPressed",C_INT);
	HMD.__AddFunction( C_INT, "IsTriggerPressed",C_INT);
	HMD.__AddFunction( C_INT, "IsGripPressed",C_INT);
	HMD.__AddFunction( C_INT, "IsTouchpadPressed",C_INT);
	HMD.__AddFunction( C_VOID, "VibrateController",C_INT, C_INT);
 	
 	/* Load Leap Motion dll */
 	leapDll = CVmExternDLL(DLL_PATH);
	leapDll.__AddFunction(C_VOID, "get_seq_number", C_PFLOAT);
	leapDll.__AddFunction(C_INT, "get_right_hand", C_PFLOAT);
	leapDll.__AddFunction(C_INT, "get_left_hand", C_PFLOAT);

	hand_r = Hand();
	hand_l = Hand();
	
	hand_r.init(1);
	hand_l.init(0);
	
	client_t = Client();
	
	#ifdef NETWORK_LOOPBACK
	client_t.conf(LOOPBACK_ADDR, SERVER_UDP_PORT_CLIENT_1, 
		CLIENT_1_UDP_PORT);
	#else
	client_t.conf(CLIENT_1_ADDR, SERVER_UDP_PORT_CLIENT_1, 
		CLIENT_1_UDP_PORT);
	#endif
	
	client_t.init();
	
//	client_t.sync();

}





function OnFrame()
{	
	CameraMoveMouse();
	CameraMoveKeyboard();
	client_t.step(hand_r, hand_l, PLAYER_1);
	
	SceneBegin();

#ifdef GRID_ON
	DrawGrid([0.5, 0.5, 0.5], 100);
#endif
	
	hand_r.update();
	hand_l.update();
		
	HMD.SceneBegin();
		
	HMD.frame_left();
	glRotate(180, 0, 1, 0);
	glTranslate(-0.1,0.7,0.3);
	//glTranslate();
	glScale(0.010, 0.010, 0.010);
	hand_r.draw();
	hand_l.draw();
	client_t.Draw();
	
	HMD.frame_right();
	glRotate(180, 0, 1, 0);
	glTranslate(-0.1,0.7,0.3);
	glScale(0.010, 0.010, 0.010);

	hand_r.draw();
	hand_l.draw();
	client_t.Draw();
	
	HMD.SceneEnd();

SceneEnd();
	

}


function DownloadReady(RequestID)
{

}



function OnTimer()
{

}



function OnExit()
{
	NetClose(client_t.id_channel);
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}

/* Camera Manager (Using Keyboard) */
function CameraMoveKeyboard() {
	var cam;
	var x_trasl, y_trasl, z_trasl;
	
	/* Get the actual camera. */
	cam = CameraGetCurrent();
	
	/* Get the actual camera axes. */
	x_trasl = cam.GetXAxis()*CAM_STEP;
	y_trasl = cam.GetYAxis()*CAM_STEP;
	z_trasl = cam.GetZAxis()*CAM_STEP;
	
	/* W,A,S,D keys control the camera movements as in FPS games.
	 * Keys Q and Z are used to adjust the camera height (w.r.t.
	 * the camera Y axis).
	 */
	if (keypressed("W")) {
		cam.SetPosition(cam.GetPosition() - z_trasl);
	}
	if (keypressed("S")) {
		cam.SetPosition(cam.GetPosition() + z_trasl);
	}
	if (keypressed("A")) {
		cam.SetPosition(cam.GetPosition() - x_trasl);
	}
	if (keypressed("D")) {
		cam.SetPosition(cam.GetPosition() + x_trasl);
	}
	if (keypressed("Q")) {
		cam.SetPosition(cam.GetPosition() + y_trasl);
	}
	if (keypressed("Z")) {
		cam.SetPosition(cam.GetPosition() - y_trasl);
	}
}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}


function OnEvent()
{
	
}

function OnError()
{
	
}