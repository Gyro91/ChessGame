#ifndef __USE_UTIL3D_
#define __USE_UTIL3D_

// ver: 1.00
//
// 6 oct 2008
// removed matrix operation now supported by XVR engine 0149
//

// windows message WIN32 API
#define WM_MOVE                         0x0003
#define WM_SIZE                         0x0005
#define WM_SETFOCUS                     0x0007
#define WM_KILLFOCUS                    0x0008
#define WM_ENABLE                       0x000A
#define WM_SHOWWINDOW					0x0018

#define WM_CONTEXTMENU					0x007B

#define WM_KEYFIRST                     0x0100
#define WM_KEYDOWN                      0x0100
#define WM_KEYUP                        0x0101
#define WM_CHAR                         0x0102
#define WM_DEADCHAR                     0x0103
#define WM_SYSKEYDOWN                   0x0104
#define WM_SYSKEYUP                     0x0105
#define WM_SYSCHAR                      0x0106
#define WM_SYSDEADCHAR                  0x0107

#define WM_INITDIALOG                   0x0110
#define WM_COMMAND                      0x0111
#define WM_SYSCOMMAND                   0x0112
#define WM_TIMER                        0x0113
#define WM_HSCROLL                      0x0114
#define WM_VSCROLL                      0x0115
#define WM_ENTERIDLE                    0x0121

#define WM_MOUSEMOVE                    0x0200
#define WM_LBUTTONDOWN                  0x0201
#define WM_LBUTTONUP                    0x0202
#define WM_LBUTTONDBLCLK                0x0203
#define WM_RBUTTONDOWN                  0x0204
#define WM_RBUTTONUP                    0x0205
#define WM_RBUTTONDBLCLK                0x0206
#define WM_MBUTTONDOWN                  0x0207
#define WM_MBUTTONUP                    0x0208
#define WM_MBUTTONDBLCLK                0x0209

#define WM_MOUSEWHEEL                   0x020A
#define WM_SIZING						0x0214

// fattori di conversione da radianti in gradi e da gradi in radianti
#define RADTOGRAD 57.295779513082320876798154814105
#define GRADTORAD 0.0174532925199432957692369076848

/*!
 *	Selects a graphical object between two points when the button is pressed
 *	\param	p0		vector[3]	start point
 *	\param	p1		vector[3]	end point
 *	\param	button	bool		true if the selection is active
 */
function selectByPoints(phm, p0, p1, button, limit)
{   
    static var selected=false;
	static var distance=0;
	static var offset;
	static var selectObj = -1;

	
	if(button && !selected){
		var compID;
		var minDist = limit;
		var dist = array(3);
		var pInt = [0.0,0.0,0.0];
		var nrml = [0.0,0.0,0.0];
		var n_tr;
		// Compute the nearest object from p0 to p1
		for(var i = 0; i < len(phm.array_PhObj); ++i){
	    //	if(phm.array_PhObj[i].type != PHX_FIXED)
				if(phm.array_PhObj[i].obj.isColliding(p0, p1, &pInt, &nrml, &n_tr, &compID)){
					dist = modulus(pInt - p0);
					if(minDist > dist){
						selectObj = phm.Array_PhObj[i].actor;
						minDist = dist;
						selected = true;
						offset = phm.Array_PhObj[i].GetPosition() - pInt;
					}
				}	
		}
		distance = minDist;
	}
	if(selected)
	{
		var newPosition = p0+norm(p1-p0)*distance + offset;
		phm.Array_PhObj[selectObj].Halt();
		phm.Array_PhObj[selectObj].SetPosition(newPosition);
	}
	if(!button)
		selected = false;
	return selectObj;
}

function _min(a, b){
	if(a > b)
		return b;
	return a;
}

function _max(a, b){
	if(a > b)
		return a;
	return b;
}

function vectorMin(values){
	var m = values[0];
	foreach(var v in values)
		if(v < m)
			m = v;
	return m;
}
 
function vectorMax(values){
	var m = values[0];
	foreach(var v in values)
		if(v > m)
			m = v;
	return m;
}

function inArray(a, obj, index)
{
	var i = 0;
	while(i < len(a) &&	a[i] != obj)
		++i;
	
	if(index != void)
		index = i;
	if(i != len(a))
		return true;
	return false;
}

//pos, boxStart, boxEnd
function inBox2d(p, bs, be){
	if(p.x > bs.x && p.y > bs.y &&
		p.x < be.x && p.y < be.y)
		return true;
	return false;
}

function arrayAddFront(a, obj)
{
	aadd(a, obj);
	for(var i = len(a)-2; i => 0 ; --i)
		a[i+1] = a[i];
	a[0] = obj;
}

function arrayAdd(a, obj, i)
{
	aadd(a, obj);
	for(var i = len(a)-2; i => i ; --i)
		a[i+1] = a[i];
	a[i] = obj;
}

function removeWhiteSpace(string){
	var i;
	var tempStr;
	for(i = len(string)-1; i > 0 && (string[i] == " " || string[i] == "\t"); --i);
	tempStr = left(string, i+1);
	for(i = 0; i < len(string) && (string[i] == " " || string[i] == "\t"); ++i);
	return right(string, len(string)-i);
}

function placeBodyRel(obj,position, rotMat)
{	
	var tp=obj.getPosition();
	var temp = vector(3);
	temp[0]=rotMat[0]*tp[0] + rotMat[4]*tp[1] + rotMat[8]*tp[2];
	temp[1]=rotMat[1]*tp[0] + rotMat[5]*tp[1] + rotMat[9]*tp[2];
	temp[2]=rotMat[2]*tp[0] + rotMat[6]*tp[1] + rotMat[10]*tp[2];
	obj.setRotationMatrix(rotMat); //rotMat è di 16
	obj.setPosition(position+temp);
}


function matFrom33to44(R)
{
	var rotMat=vector(16);
	rotMat[0]=R[0];
	rotMat[1]=R[1];
	rotMat[2]=R[2];
	rotMat[3]=0;
	
	rotMat[4]=R[3];
	rotMat[5]=R[4];
	rotMat[6]=R[5];
	rotMat[7]=0;
	
	rotMat[8]=R[6];
	rotMat[9]=R[7];
	rotMat[10]=R[8];
	rotMat[11]=0;
	
	rotMat[12]=	rotMat[13]=	rotMat[14] = 0.0;
	rotMat[15]=1;
 	
 	return rotMat;
}
function matrix3FromEulerAngles(R, phi, theta, psi)
{
	var sphi,cphi,stheta,ctheta,spsi,cpsi;
	sphi = sin(phi);
	cphi = cos(phi);
	stheta = sin(theta);
	ctheta = cos(theta);
	spsi = sin(psi);
	cpsi = cos(psi);
	
	R[0] = cpsi*ctheta;
	R[1] = spsi*ctheta;
	R[2] =-stheta;
	
	R[3] = cpsi*stheta*sphi - spsi*cphi;
	R[4] = spsi*stheta*sphi + cpsi*cphi;
	R[5] = ctheta*sphi;
	
	R[6] = cpsi*stheta*cphi + spsi*sphi;
	R[7] = spsi*stheta*cphi - cpsi*sphi;
	R[8] = ctheta*cphi;
}

/*
//This function is not mathematically correct
function multMatVect(a, b, retV){
	if(len(a) == 9)
	{
		for(var i = 0; i < 3; i++)
			retV[i] = a[i]*b.x + a[i+3]*b.y + a[i+6]*b.z;
	}
	else{
		for(var i = 0; i < 3; i++)
			retV[i] = a[i]*b.x + a[i+4]*b.y + a[i+8]*b.z + a[i+12];
	}
	return retV;
}*/

function invertRototraslationMatrix(a){
	var temp;
	temp = a[1];
	a[1] = a[4];
	a[4] = temp;
	temp = a[2];
	a[2] = a[8];
	a[8] = temp;
	temp = a[6];
	a[6] = a[9];
	a[9] = temp;
	a[12] = -a[12];
	a[13] = -a[13];
	a[14] = -a[14];
	return a;
}

function globalToLocal(obj, globPos){
	var a = obj.getRotationMatrix();
	// Prima si trasla e poi si ruota
	globPos -= [a[12], a[13], a[14], a[15]];
	a[12] = a[13] = a[14] = 0.0;
	invertRototraslationMatrix(&a);
	return MatrixMultiplyVector_4(a, globPos);
	
}

// return euleran angles in radiant from a rotation rototraslation matrix
function matrixToAngles(m, a){
	// Assuming the angles are in radians.
/*	if (abs(m[8]) >= 0.9999){ // singularity at pole
		a[0] = m[8]*PI/2;
		a[1] = 0;
		a[2] = atan2(m[2],m[1]);
		return a;
	}
	a[0] = atan2(-m[9],m[10]);
	a[1] = asin(m[8]);
	a[2] = atan2(-m[4],m[0]);
*/	
	if(abs(m[1]) >= 0.9999)
	{
		a[0] = atan2(-m[4],m[8]);
		a[1] = 0;
		a[2] = PI/2;
		return a;	
	}
	a[0] = atan2(-m[9], m[5]);
	a[1] = atan2(-m[2], m[0]);
	a[2] = asin(m[1]);
	return a;
}
/*
function matrix44ToQuaterion(m, q){
	//Reference "3dMath primer for graphics and gamer devolopment" Pag. 187
	var fourSquareMinusOne = vector(4);
	var biggestIndex = 0;
	var mult;

	fourSquareMinusOne.w = m[0] + m[5] + m[10];
	fourSquareMinusOne.x = m[0] - m[5] - m[10];
	fourSquareMinusOne.y = -m[0] + m[5] - m[10];
	fourSquareMinusOne.z = -m[0] - m[5] + m[10];

	for(var i = 1; i < len(fourSquareMinusOne); i++){
		if(fourSquareMinusOne[i] > fourSquareMinusOne[biggestIndex])
			biggestIndex = i;
	}
	//Si calcola la radice quadrata soltanto per il valore che ci interessa
	fourSquareMinusOne[biggestIndex] = sqrt(fourSquareMinusOne[biggestIndex]+1.0)*0.5;
	mult = 0.25 / fourSquareMinusOne[biggestIndex];
	switch(biggestIndex){
	case 0: //X
		q.w = (m[9] - m[6]) * mult;
		q.x = fourSquareMinusOne[biggestIndex];
		q.y = (m[4] + m[1]) * mult;
		q.z = (m[2] + m[8]) * mult;
		break;
	case 1: //Y
		q.w = (m[2] - m[8]) * mult;
		q.x = (m[4] + m[1]) * mult;
		q.y = fourSquareMinusOne[biggestIndex];
		q.z = (m[9] + m[6]) * mult;
		break;
	case 2: //Z
		q.w = (m[4] - m[1]) * mult;
		q.x = (m[2] + m[8]) * mult;
		q.y = (m[9] + m[6]) * mult;		
		q.z = fourSquareMinusOne[biggestIndex];
		break;
	case 3: //W
		q.w = fourSquareMinusOne[biggestIndex];
		q.x = (m[9] - m[6]) * mult;
		q.y = (m[2] - m[8]) * mult;
		q.z = (m[4] - m[1]) * mult;
		break;
	}
}

function quaterionToMatrix44(q, m){
	m[0] = 1 - 2*q.y*q.y - 2*q.z*q.z;
	m[1] = 2*q.x*q.y - 2*q.w*q.z;
	m[2] = 2*q.x*q.z + 2*q.w*q.y;
	
	m[4] = 2*q.x*q.y + 2*q.w*q.z;
	m[5] = 1 - 2*q.x*q.x - 2*q.z*q.z;
	m[6] = 2*q.y*q.z - 2*q.w*q.x;
	
	m[8] = 2*q.x*q.z - 2*q.w*q.y;
	m[9] = 2*q.y*q.z + 2*q.w*q.x;
	m[10] = 1 - 2*q.x*q.x - 2*q.y*q.y;
}

function angleToQuaterion(a, q){
	var cp = cos(a.x*0.5*GRADTORAD);
	var sp = sin(a.x*0.5*GRADTORAD);
	var ch = cos(a.y*0.5*GRADTORAD);
	var sh = sin(a.y*0.5*GRADTORAD);
	var cb = cos(a.z*0.5*GRADTORAD);
	var sb = sin(a.z*0.5*GRADTORAD);
	
	q.w = ch*cp*cb+sh*sp*sb;
	q.x = ch*sp*cb+sh*cp*sb;
	q.y = sh*cp*cb-ch*sp*sb;
	q.z = ch*cp*sb-sh*sp*cb;
}
/*
function slerp(q1, q2, t, r){
	var k0, k1;
	var cosOmega = q1.w*q2.w + q1.x*q2.x + q1.y*q2.y + q1.z*q2.z;
	
	if(cosOmega < 0.0){
		q1 = -q1;
		cosOmega = -cosOmega;
	}
	if(cosOmega > 0.9999){
		//l'angolo è molto piccolo, si usa l'interpolazione lineare
		//altrimenti 1/sin(omega) diventa infinito
		k0 = 1.0 - t;
		k1 = t;	
	}else{
		var sinOmega = sqrt(1.0 - cosOmega * cosOmega);
		var omega = atan2(sinOmega, cosOmega);
		var inverseSin = 1.0/sinOmega;
		k0 = sin((1.0 -t) * omega) * inverseSin;
		k1 = sin(t * omega) * inverseSin;
	}
	r.w = q1.w*k0 + q2.w*k1;
	r.x = q1.x*k0 + q2.x*k1;
	r.y = q1.y*k0 + q2.y*k1;
	r.z = q1.z*k0 + q2.z*k1;
}*/

//gli angoli sono espressi in radianti
function findRotationMatrix33(a, returnMatrix){
	var cp = cos(a.x);	//pitch
	var sp = sin(a.x);
	var ch = cos(a.y);	//heading
	var sh = sin(a.y);
	var cb = cos(a.z);	//banking
	var sb = sin(a.z);
	returnMatrix[0] = ch * cb + sh * sp * sb;
	returnMatrix[1] = sb * cp;
	returnMatrix[2] = -sh * cb + ch * sp * sb;
	returnMatrix[3] = -ch * sb + sh * sp * cb;
	returnMatrix[4] = cb * cp;
	returnMatrix[5] = sb * sh + ch * sp * cb;
	returnMatrix[6] = sh * cp;
	returnMatrix[7] = -sp;
	returnMatrix[8] = ch * cp;

	return returnMatrix;
}

function findRotationMatrix44(p, a, returnMatrix){
	var rot = findRotationMatrix33(a, [returnMatrix[0], returnMatrix[1], returnMatrix[2], returnMatrix[4], returnMatrix[5], returnMatrix[6], returnMatrix[8], returnMatrix[9], returnMatrix[10]]);
	returnMatrix[ 0] = rot[0];
	returnMatrix[ 1] = rot[1];
	returnMatrix[ 2] = rot[2];
	returnMatrix[ 4] = rot[3];
	returnMatrix[ 5] = rot[4];
	returnMatrix[ 6] = rot[5];
	returnMatrix[ 8] = rot[6];
	returnMatrix[ 9] = rot[7];
	returnMatrix[10] = rot[8];
	returnMatrix[12] = p.x;
	returnMatrix[13] = p.y;
	returnMatrix[14] = p.z;
	returnMatrix[15] = 1;
	return returnMatrix;
}

function transposeMatrix44(a){
	var temp;
	temp = a[1];
	a[1] = a[4];
	a[4] = temp;
	temp = a[2];
	a[2] = a[8];
	a[8] = temp;
	temp = a[3];
	a[3] = a[12];
	a[12]= temp;
	temp = a[6];
	a[6] = a[9];
	a[9] = temp;
	temp = a[7];
	a[7] = a[13];
	a[13]= temp;
	temp = a[11];
	a[11]= a[14];
	a[14]= temp;
	return a;
}

function drawMatrix44(matrix){
	var p = [matrix[12], matrix[13], matrix[14]];
	var x = p + [matrix[0], matrix[1], matrix[2]];
	var y = p + [matrix[4], matrix[5], matrix[6]];
	var z = p + [matrix[8], matrix[9], matrix[10]];
	glPushAttrib(GL_LIGHTING_BIT);
	glDisable(GL_LIGHTING);
	glBegin(GL_LINES);
		glColor(1.0, 0.0, 0.0, 1.0);	// X = Rosso;
		glVertex(p);
		glVertex(x);
	glEnd();
	glBegin(GL_LINES);
		glColor(0.0, 1.0, 0.0, 1.0);	// Y = Verde;
		glVertex(p);
		glVertex(y);
	glEnd();
	glBegin(GL_LINES);
		glColor(0.0, 0.0, 1.0, 1.0);	// Z = Blu;
		glVertex(p);
		glVertex(z);
	glEnd();
	glPopAttrib();
}

function drawBoundingBox(mBoundingBox)
{
	var points = array(8);

	points[0] = [mBoundingBox[0], mBoundingBox[1], mBoundingBox[2]];
	points[1] = [mBoundingBox[0], mBoundingBox[1], mBoundingBox[5]];
	points[2] = [mBoundingBox[3], mBoundingBox[1], mBoundingBox[5]];
	points[3] = [mBoundingBox[3], mBoundingBox[1], mBoundingBox[2]];
	points[4] = [mBoundingBox[0], mBoundingBox[4], mBoundingBox[2]];
	points[5] = [mBoundingBox[0], mBoundingBox[4], mBoundingBox[5]];
	points[6] = [mBoundingBox[3], mBoundingBox[4], mBoundingBox[5]];
	points[7] = [mBoundingBox[3], mBoundingBox[4], mBoundingBox[2]];

	glPushAttrib(GL_LIGHTING_BIT);
	glDisable(GL_LIGHTING);
	glColor(0.5, 0.5, 0.5, 1.0);
	glBegin(GL_LINE_STRIP);
		glVertex(points[0]);
		glVertex(points[1]);
		glVertex(points[2]);
		glVertex(points[3]);
		glVertex(points[0]);
		glVertex(points[4]);
		glVertex(points[5]);
		glVertex(points[6]);
		glVertex(points[7]);
		glVertex(points[4]);
	glEnd();
	glBegin(GL_LINES);
		glVertex(points[1]);
		glVertex(points[5]);
	glEnd();
	glBegin(GL_LINES);
		glVertex(points[2]);
		glVertex(points[6]);
	glEnd();
	glBegin(GL_LINES);
		glVertex(points[3]);
		glVertex(points[7]);
	glEnd();
	glPopAttrib();
}

function computeBoundingBox(obj, pVect)
{
	static var min = vector(3);
	static var max = vector(3);
	var matrix = obj.getModelMatrix();
	var mBoundingBox = obj.GetMesh().getBoundingBox();
	var points = array(8);

	points[0] = [mBoundingBox[0], mBoundingBox[1], mBoundingBox[2], 1.0];
	points[1] = [mBoundingBox[0], mBoundingBox[1], mBoundingBox[5], 1.0];
	points[2] = [mBoundingBox[3], mBoundingBox[1], mBoundingBox[5], 1.0];
	points[3] = [mBoundingBox[3], mBoundingBox[1], mBoundingBox[2], 1.0];
	points[4] = [mBoundingBox[0], mBoundingBox[4], mBoundingBox[2], 1.0];
	points[5] = [mBoundingBox[0], mBoundingBox[4], mBoundingBox[5], 1.0];
	points[6] = [mBoundingBox[3], mBoundingBox[4], mBoundingBox[5], 1.0];
	points[7] = [mBoundingBox[3], mBoundingBox[4], mBoundingBox[2], 1.0];

	points[0] = MatrixMultiplyVector_4(matrix, points[0]);
	points[1] = MatrixMultiplyVector_4(matrix, points[1]);
	points[2] = MatrixMultiplyVector_4(matrix, points[2]);
	points[3] = MatrixMultiplyVector_4(matrix, points[3]);
	points[4] = MatrixMultiplyVector_4(matrix, points[4]);
	points[5] = MatrixMultiplyVector_4(matrix, points[5]);
	points[6] = MatrixMultiplyVector_4(matrix, points[6]);
	points[7] = MatrixMultiplyVector_4(matrix, points[7]);
	
	min = max = points[0];
	for(var i = 1; i < 8; ++i)
	{
		min.x = _min(points[i].x, min.x);
		min.y = _min(points[i].y, min.y);
		min.z = _min(points[i].z, min.z);
		max.x = _max(points[i].x, max.x);
		max.y = _max(points[i].y, max.y);
		max.z = _max(points[i].z, max.z);
	}
	pVect[0] = min.x;
	pVect[1] = min.y;
	pVect[2] = min.z;
	pVect[3] = max.x;
	pVect[4] = max.y;
	pVect[5] = max.z;
}

function boundingBoxIntersection(bb1, bb2, res)
{
	res[0] = _max(bb1[0], bb2[0]);
	res[1] = _max(bb1[1], bb2[1]);
	res[2] = _max(bb1[2], bb2[2]);
	res[3] = _min(bb1[3], bb2[3]);
	res[4] = _min(bb1[4], bb2[4]);
	res[5] = _min(bb1[5], bb2[5]);
}

function bitString(i)
{
	var retString;
	var mask = 0x80000000;
	if((i & mask) != 0)
		retString = "1";
	else
		retString = "0";
	mask = 1073741824;
	do{
		if((i & mask) != 0)
			retString += "1";
		else
			retString += "0";
		mask /= 2;	// CAZZO!! Manca lo shift a destra
	}while(mask != 0);
	return retString;
}
#endif //_UTIL3D_
