/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>

#define PHYSX
#define TIMER_STEP 10

/* Include shared libraries */


/* Initialization synchonization */
var end_init = 0;
/* COMMUNICATION VARIABLES */
var server_t;


/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.005;
SET SCENE_FAR  = 1000;


#include "../../libXVRshared/Server.s3d"


function OnDownload()
{
	
}



function OnInit(params)
{
	SetLocalDir("");
	
	SetTimeStep(TIMER_STEP);

	server_t = Server();
	#ifdef NETWORK_LOOPBACK
	server_t.conf(LOOPBACK_ADDR, SERVER_UDP_PORT_CLIENT_1, 
		SERVER_UDP_PORT_CLIENT_2, LOOPBACK_ADDR,
		CLIENT_1_UDP_PORT, LOOPBACK_ADDR, CLIENT_2_UDP_PORT
	);
	#else
	server_t.conf(SERVER_ADDR, SERVER_UDP_PORT_CLIENT_1, 
		SERVER_UDP_PORT_CLIENT_2, CLIENT_1_ADDR,
		CLIENT_1_UDP_PORT, CLIENT_2_ADDR, CLIENT_2_UDP_PORT
	);
	#endif
	
	server_t.init();
	
//	server_t.sync();
	
	/*Initialization ended */
	end_init = 1;
}

function OnFrame()
{	
	SceneBegin();
	
	SceneEnd();
	
}


function DownloadReady(RequestID)
{

}



function OnTimer()
{
	/* Wait the end of the OnInit() */
	if (end_init == 1) {
		server_t.step();
	}
}



function OnExit()
{
	NetClose(server_t.id_channel_client1);
	NetClose(server_t.id_channel_client2);
}



function OnEvent()
{
	
}

function OnError()
{
	
}