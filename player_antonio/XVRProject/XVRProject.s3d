
/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "../../libXVRshared/Networking.s3d"

#define TIMESTEP_ON_TIMER 20
/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;


// TODO: put your global variables here
/* Hand Variables */
var seq_number = 0;


var hand_r;
var hand_l;

var pkt_hand;
var p_adversary;



/* Camera globals */
var CamPos = [0.0, 1.0, 5.0]; 	// camera position


/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);




function OnDownload()
{
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
}



function OnInit(params)
{
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	// TODO: put your initialization code here
	SetLocalDir("");
	
 	leapDll = CVmExternDLL( "../DLL_Leap_MotionXVR/Debug/DLL_Leap_MotionXVR.dll" );

	leapDll.__AddFunction( C_VOID, "get_seq_number", C_PFLOAT);
	leapDll.__AddFunction( C_INT, "get_right_hand", C_PFLOAT);
	leapDll.__AddFunction( C_INT, "get_left_hand", C_PFLOAT);

	hand_r = Hand();
	hand_l = Hand();
	
	hand_r.init(1);
	hand_l.init(0);
	
	
	p_adversary = Player();
	var my_channel = NetCreateChannel(50000, 0, VR_NO_BLOCKING);
	p_adversary.init(1, "192.168.1.71", 50001, my_channel);
	
//	setTimeStep(TIMESTEP_ON_TIMER);
}

function draw_textured_quad(x1,y1,x2,y2);
function draw_circle();
function draw_torus();






function OnFrame()
{	
	static var i = 0;
	CameraMoveMouse();
	SceneBegin();	
	DrawGrid([0.5, 0.5, 0.5], 100);	
	glDisable(GL_LIGHTING);
	glColor(1,1,1);
	glEnable(GL_TEXTURE_2D);
	
	 
	var pkt = p_adversary.rcv();
	if (pkt.type_error != -1 && pkt.type_error != -2) {
		hand_l.push_raw_data(pkt.data);
		hand_l.draw();
	}

	
	glDisable(GL_CULL_FACE);

	SceneEnd();
	
	
}





function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
	
	
  
	//outputln(pkt_hand.sequence_remote_id);
}



function OnExit()
{
	// TODO: put your cleanup code here
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}



function OnEvent()
{
	
}

function OnError()
{
	
}